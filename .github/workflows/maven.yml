# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    #branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 18
        uses: actions/setup-java@v3
        with:
          java-version: '18'
          distribution: 'temurin'
      # Testing phase
      - name: Test with Maven
        run: mvn --batch-mode --update-snapshots verify -f panda/pom.xml
      # Store jacoco.xml Into A New Folder
      - name: Put into a directory
        run: mkdir jacoco-report && cp panda/target/site/jacoco/jacoco.xml jacoco-report && ls -r jacoco-report
      #Upload the results.xml as an artifact
      - name: Archive Code Coverage Results
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: jacoco-report
  
  test_coverage:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      checks: write
    steps:
      # Dowload the results to exploit
      - name: Download Code Coverage Results
        uses: actions/download-artifact@v3
        with:
          name: code-coverage-report
          path: jacoco-report
      # Check the root of the repo
      - name : Display root
        run: ls -r jacoco-report
      # Adding Coverage to Push
      - name: Add coverage to Push
        id: jacoco
        uses: madrapps/jacoco-report@v1.3
        with:
          paths: ${{ github.workspace }}/jacoco-report/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 80
          min-coverage-changed-files: 60
      # Saving the Coverage Report
      - name: Save Coverage To Environment Variable
        run: |
          echo "TOTAL_COVERAGE=${{ steps.jacoco.outputs.coverage-overall }}" >> $GITHUB_ENV
          echo "CHANGED_FILES_COVERAGE=${{ steps.jacoco.outputs.coverage-changed-files }}" >> $GITHUB_ENV

      - name: Print & Check Coverage Info
        run: |
          import os
          import sys
          print("Total Coverage: " + str(os.environ["TOTAL_COVERAGE"]))
          print("Changed Files Coverage: " + str(os.environ["CHANGED_FILES_COVERAGE"]))
          if float(os.environ["TOTAL_COVERAGE"]) < 80 or float(os.environ["CHANGED_FILES_COVERAGE"]) < 80:
            print("Insufficient Coverage!")
            sys.exit(-1) # Cause Status Check Failure due to noncompliant coverage
          sys.exit(0)
        shell: python


